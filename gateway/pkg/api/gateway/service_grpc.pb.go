// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/gateway/service.proto

package gateway

import (
	context "context"
	auth "gateway/pkg/api/auth"
	chat "gateway/pkg/api/chat"
	social "gateway/pkg/api/social"
	users "gateway/pkg/api/users"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatewayService_Register_FullMethodName             = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/Register"
	GatewayService_Login_FullMethodName                = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/Login"
	GatewayService_Refresh_FullMethodName              = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/Refresh"
	GatewayService_CreateProfile_FullMethodName        = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/CreateProfile"
	GatewayService_UpdateProfile_FullMethodName        = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/UpdateProfile"
	GatewayService_GetProfileByID_FullMethodName       = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/GetProfileByID"
	GatewayService_GetProfileByNickname_FullMethodName = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/GetProfileByNickname"
	GatewayService_SearchByNickname_FullMethodName     = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/SearchByNickname"
	GatewayService_SendFriendRequest_FullMethodName    = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/SendFriendRequest"
	GatewayService_ListRequests_FullMethodName         = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/ListRequests"
	GatewayService_AcceptFriendRequest_FullMethodName  = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/AcceptFriendRequest"
	GatewayService_DeclineFriendRequest_FullMethodName = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/DeclineFriendRequest"
	GatewayService_RemoveFriend_FullMethodName         = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/RemoveFriend"
	GatewayService_ListFriends_FullMethodName          = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/ListFriends"
	GatewayService_CreateDirectChat_FullMethodName     = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/CreateDirectChat"
	GatewayService_GetChat_FullMethodName              = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/GetChat"
	GatewayService_ListUserChats_FullMethodName        = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/ListUserChats"
	GatewayService_ListChatMembers_FullMethodName      = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/ListChatMembers"
	GatewayService_SendMessage_FullMethodName          = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/SendMessage"
	GatewayService_ListMessages_FullMethodName         = "/github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService/ListMessages"
)

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GatewayService - HTTP Gateway для всех микросервисов
type GatewayServiceClient interface {
	// Register - Регистрация пользователя
	Register(ctx context.Context, in *auth.RegisterRequest, opts ...grpc.CallOption) (*auth.RegisterResponse, error)
	// Login - Аутентификация пользователя
	Login(ctx context.Context, in *auth.LoginRequest, opts ...grpc.CallOption) (*auth.LoginResponse, error)
	// Refresh - Обновление токена
	Refresh(ctx context.Context, in *auth.RefreshRequest, opts ...grpc.CallOption) (*auth.RefreshResponse, error)
	// CreateProfile - Создание профиля пользователя
	CreateProfile(ctx context.Context, in *users.CreateProfileRequest, opts ...grpc.CallOption) (*users.CreateProfileResponse, error)
	// UpdateProfile - Обновление профиля пользователя
	UpdateProfile(ctx context.Context, in *users.UpdateProfileRequest, opts ...grpc.CallOption) (*users.UpdateProfileResponse, error)
	// GetProfileByID - Получение профиля по ID
	GetProfileByID(ctx context.Context, in *users.GetProfileByIDRequest, opts ...grpc.CallOption) (*users.GetProfileByIDResponse, error)
	// GetProfileByNickname - Получение профиля по никнейму
	GetProfileByNickname(ctx context.Context, in *users.GetProfileByNicknameRequest, opts ...grpc.CallOption) (*users.GetProfileByNicknameResponse, error)
	// SearchByNickname - Поиск пользователей по никнейму
	SearchByNickname(ctx context.Context, in *users.SearchByNicknameRequest, opts ...grpc.CallOption) (*users.SearchByNicknameResponse, error)
	// SendFriendRequest - Отправить заявку в друзья
	SendFriendRequest(ctx context.Context, in *social.SendFriendRequestRequest, opts ...grpc.CallOption) (*social.SendFriendRequestResponse, error)
	// ListRequests - Список входящих заявок в друзья
	ListRequests(ctx context.Context, in *social.ListRequestsRequest, opts ...grpc.CallOption) (*social.ListRequestsResponse, error)
	// AcceptFriendRequest - Принять заявку в друзья
	AcceptFriendRequest(ctx context.Context, in *social.AcceptFriendRequestRequest, opts ...grpc.CallOption) (*social.AcceptFriendRequestResponse, error)
	// DeclineFriendRequest - Отклонить заявку в друзья
	DeclineFriendRequest(ctx context.Context, in *social.DeclineFriendRequestRequest, opts ...grpc.CallOption) (*social.DeclineFriendRequestResponse, error)
	// RemoveFriend - Удалить из друзей
	RemoveFriend(ctx context.Context, in *social.RemoveFriendRequest, opts ...grpc.CallOption) (*social.RemoveFriendResponse, error)
	// ListFriends - Список друзей
	ListFriends(ctx context.Context, in *social.ListFriendsRequest, opts ...grpc.CallOption) (*social.ListFriendsResponse, error)
	// CreateDirectChat - Создать личный чат
	CreateDirectChat(ctx context.Context, in *chat.CreateDirectChatRequest, opts ...grpc.CallOption) (*chat.CreateDirectChatResponse, error)
	// GetChat - Получить информацию о чате
	GetChat(ctx context.Context, in *chat.GetChatRequest, opts ...grpc.CallOption) (*chat.GetChatResponse, error)
	// ListUserChats - Список чатов пользователя
	ListUserChats(ctx context.Context, in *chat.ListUserChatsRequest, opts ...grpc.CallOption) (*chat.ListUserChatsResponse, error)
	// ListChatMembers - Список участников чата
	ListChatMembers(ctx context.Context, in *chat.ListChatMembersRequest, opts ...grpc.CallOption) (*chat.ListChatMembersResponse, error)
	// SendMessage - Отправить сообщение
	SendMessage(ctx context.Context, in *chat.SendMessageRequest, opts ...grpc.CallOption) (*chat.SendMessageResponse, error)
	// ListMessages - История сообщений
	ListMessages(ctx context.Context, in *chat.ListMessagesRequest, opts ...grpc.CallOption) (*chat.ListMessagesResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) Register(ctx context.Context, in *auth.RegisterRequest, opts ...grpc.CallOption) (*auth.RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(auth.RegisterResponse)
	err := c.cc.Invoke(ctx, GatewayService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Login(ctx context.Context, in *auth.LoginRequest, opts ...grpc.CallOption) (*auth.LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(auth.LoginResponse)
	err := c.cc.Invoke(ctx, GatewayService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Refresh(ctx context.Context, in *auth.RefreshRequest, opts ...grpc.CallOption) (*auth.RefreshResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(auth.RefreshResponse)
	err := c.cc.Invoke(ctx, GatewayService_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateProfile(ctx context.Context, in *users.CreateProfileRequest, opts ...grpc.CallOption) (*users.CreateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(users.CreateProfileResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdateProfile(ctx context.Context, in *users.UpdateProfileRequest, opts ...grpc.CallOption) (*users.UpdateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(users.UpdateProfileResponse)
	err := c.cc.Invoke(ctx, GatewayService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetProfileByID(ctx context.Context, in *users.GetProfileByIDRequest, opts ...grpc.CallOption) (*users.GetProfileByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(users.GetProfileByIDResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetProfileByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetProfileByNickname(ctx context.Context, in *users.GetProfileByNicknameRequest, opts ...grpc.CallOption) (*users.GetProfileByNicknameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(users.GetProfileByNicknameResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetProfileByNickname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SearchByNickname(ctx context.Context, in *users.SearchByNicknameRequest, opts ...grpc.CallOption) (*users.SearchByNicknameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(users.SearchByNicknameResponse)
	err := c.cc.Invoke(ctx, GatewayService_SearchByNickname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SendFriendRequest(ctx context.Context, in *social.SendFriendRequestRequest, opts ...grpc.CallOption) (*social.SendFriendRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(social.SendFriendRequestResponse)
	err := c.cc.Invoke(ctx, GatewayService_SendFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListRequests(ctx context.Context, in *social.ListRequestsRequest, opts ...grpc.CallOption) (*social.ListRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(social.ListRequestsResponse)
	err := c.cc.Invoke(ctx, GatewayService_ListRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) AcceptFriendRequest(ctx context.Context, in *social.AcceptFriendRequestRequest, opts ...grpc.CallOption) (*social.AcceptFriendRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(social.AcceptFriendRequestResponse)
	err := c.cc.Invoke(ctx, GatewayService_AcceptFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeclineFriendRequest(ctx context.Context, in *social.DeclineFriendRequestRequest, opts ...grpc.CallOption) (*social.DeclineFriendRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(social.DeclineFriendRequestResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeclineFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RemoveFriend(ctx context.Context, in *social.RemoveFriendRequest, opts ...grpc.CallOption) (*social.RemoveFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(social.RemoveFriendResponse)
	err := c.cc.Invoke(ctx, GatewayService_RemoveFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListFriends(ctx context.Context, in *social.ListFriendsRequest, opts ...grpc.CallOption) (*social.ListFriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(social.ListFriendsResponse)
	err := c.cc.Invoke(ctx, GatewayService_ListFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateDirectChat(ctx context.Context, in *chat.CreateDirectChatRequest, opts ...grpc.CallOption) (*chat.CreateDirectChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(chat.CreateDirectChatResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreateDirectChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetChat(ctx context.Context, in *chat.GetChatRequest, opts ...grpc.CallOption) (*chat.GetChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(chat.GetChatResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListUserChats(ctx context.Context, in *chat.ListUserChatsRequest, opts ...grpc.CallOption) (*chat.ListUserChatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(chat.ListUserChatsResponse)
	err := c.cc.Invoke(ctx, GatewayService_ListUserChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListChatMembers(ctx context.Context, in *chat.ListChatMembersRequest, opts ...grpc.CallOption) (*chat.ListChatMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(chat.ListChatMembersResponse)
	err := c.cc.Invoke(ctx, GatewayService_ListChatMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SendMessage(ctx context.Context, in *chat.SendMessageRequest, opts ...grpc.CallOption) (*chat.SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(chat.SendMessageResponse)
	err := c.cc.Invoke(ctx, GatewayService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListMessages(ctx context.Context, in *chat.ListMessagesRequest, opts ...grpc.CallOption) (*chat.ListMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(chat.ListMessagesResponse)
	err := c.cc.Invoke(ctx, GatewayService_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility.
//
// GatewayService - HTTP Gateway для всех микросервисов
type GatewayServiceServer interface {
	// Register - Регистрация пользователя
	Register(context.Context, *auth.RegisterRequest) (*auth.RegisterResponse, error)
	// Login - Аутентификация пользователя
	Login(context.Context, *auth.LoginRequest) (*auth.LoginResponse, error)
	// Refresh - Обновление токена
	Refresh(context.Context, *auth.RefreshRequest) (*auth.RefreshResponse, error)
	// CreateProfile - Создание профиля пользователя
	CreateProfile(context.Context, *users.CreateProfileRequest) (*users.CreateProfileResponse, error)
	// UpdateProfile - Обновление профиля пользователя
	UpdateProfile(context.Context, *users.UpdateProfileRequest) (*users.UpdateProfileResponse, error)
	// GetProfileByID - Получение профиля по ID
	GetProfileByID(context.Context, *users.GetProfileByIDRequest) (*users.GetProfileByIDResponse, error)
	// GetProfileByNickname - Получение профиля по никнейму
	GetProfileByNickname(context.Context, *users.GetProfileByNicknameRequest) (*users.GetProfileByNicknameResponse, error)
	// SearchByNickname - Поиск пользователей по никнейму
	SearchByNickname(context.Context, *users.SearchByNicknameRequest) (*users.SearchByNicknameResponse, error)
	// SendFriendRequest - Отправить заявку в друзья
	SendFriendRequest(context.Context, *social.SendFriendRequestRequest) (*social.SendFriendRequestResponse, error)
	// ListRequests - Список входящих заявок в друзья
	ListRequests(context.Context, *social.ListRequestsRequest) (*social.ListRequestsResponse, error)
	// AcceptFriendRequest - Принять заявку в друзья
	AcceptFriendRequest(context.Context, *social.AcceptFriendRequestRequest) (*social.AcceptFriendRequestResponse, error)
	// DeclineFriendRequest - Отклонить заявку в друзья
	DeclineFriendRequest(context.Context, *social.DeclineFriendRequestRequest) (*social.DeclineFriendRequestResponse, error)
	// RemoveFriend - Удалить из друзей
	RemoveFriend(context.Context, *social.RemoveFriendRequest) (*social.RemoveFriendResponse, error)
	// ListFriends - Список друзей
	ListFriends(context.Context, *social.ListFriendsRequest) (*social.ListFriendsResponse, error)
	// CreateDirectChat - Создать личный чат
	CreateDirectChat(context.Context, *chat.CreateDirectChatRequest) (*chat.CreateDirectChatResponse, error)
	// GetChat - Получить информацию о чате
	GetChat(context.Context, *chat.GetChatRequest) (*chat.GetChatResponse, error)
	// ListUserChats - Список чатов пользователя
	ListUserChats(context.Context, *chat.ListUserChatsRequest) (*chat.ListUserChatsResponse, error)
	// ListChatMembers - Список участников чата
	ListChatMembers(context.Context, *chat.ListChatMembersRequest) (*chat.ListChatMembersResponse, error)
	// SendMessage - Отправить сообщение
	SendMessage(context.Context, *chat.SendMessageRequest) (*chat.SendMessageResponse, error)
	// ListMessages - История сообщений
	ListMessages(context.Context, *chat.ListMessagesRequest) (*chat.ListMessagesResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServiceServer struct{}

func (UnimplementedGatewayServiceServer) Register(context.Context, *auth.RegisterRequest) (*auth.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGatewayServiceServer) Login(context.Context, *auth.LoginRequest) (*auth.LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGatewayServiceServer) Refresh(context.Context, *auth.RefreshRequest) (*auth.RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedGatewayServiceServer) CreateProfile(context.Context, *users.CreateProfileRequest) (*users.CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedGatewayServiceServer) UpdateProfile(context.Context, *users.UpdateProfileRequest) (*users.UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedGatewayServiceServer) GetProfileByID(context.Context, *users.GetProfileByIDRequest) (*users.GetProfileByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByID not implemented")
}
func (UnimplementedGatewayServiceServer) GetProfileByNickname(context.Context, *users.GetProfileByNicknameRequest) (*users.GetProfileByNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByNickname not implemented")
}
func (UnimplementedGatewayServiceServer) SearchByNickname(context.Context, *users.SearchByNicknameRequest) (*users.SearchByNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByNickname not implemented")
}
func (UnimplementedGatewayServiceServer) SendFriendRequest(context.Context, *social.SendFriendRequestRequest) (*social.SendFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendRequest not implemented")
}
func (UnimplementedGatewayServiceServer) ListRequests(context.Context, *social.ListRequestsRequest) (*social.ListRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRequests not implemented")
}
func (UnimplementedGatewayServiceServer) AcceptFriendRequest(context.Context, *social.AcceptFriendRequestRequest) (*social.AcceptFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFriendRequest not implemented")
}
func (UnimplementedGatewayServiceServer) DeclineFriendRequest(context.Context, *social.DeclineFriendRequestRequest) (*social.DeclineFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineFriendRequest not implemented")
}
func (UnimplementedGatewayServiceServer) RemoveFriend(context.Context, *social.RemoveFriendRequest) (*social.RemoveFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriend not implemented")
}
func (UnimplementedGatewayServiceServer) ListFriends(context.Context, *social.ListFriendsRequest) (*social.ListFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriends not implemented")
}
func (UnimplementedGatewayServiceServer) CreateDirectChat(context.Context, *chat.CreateDirectChatRequest) (*chat.CreateDirectChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectChat not implemented")
}
func (UnimplementedGatewayServiceServer) GetChat(context.Context, *chat.GetChatRequest) (*chat.GetChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedGatewayServiceServer) ListUserChats(context.Context, *chat.ListUserChatsRequest) (*chat.ListUserChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserChats not implemented")
}
func (UnimplementedGatewayServiceServer) ListChatMembers(context.Context, *chat.ListChatMembersRequest) (*chat.ListChatMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChatMembers not implemented")
}
func (UnimplementedGatewayServiceServer) SendMessage(context.Context, *chat.SendMessageRequest) (*chat.SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedGatewayServiceServer) ListMessages(context.Context, *chat.ListMessagesRequest) (*chat.ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}
func (UnimplementedGatewayServiceServer) testEmbeddedByValue()                        {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Register(ctx, req.(*auth.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Login(ctx, req.(*auth.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Refresh(ctx, req.(*auth.RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(users.CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateProfile(ctx, req.(*users.CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(users.UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateProfile(ctx, req.(*users.UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetProfileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(users.GetProfileByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetProfileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetProfileByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetProfileByID(ctx, req.(*users.GetProfileByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetProfileByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(users.GetProfileByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetProfileByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetProfileByNickname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetProfileByNickname(ctx, req.(*users.GetProfileByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SearchByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(users.SearchByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SearchByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_SearchByNickname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SearchByNickname(ctx, req.(*users.SearchByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SendFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(social.SendFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SendFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_SendFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SendFriendRequest(ctx, req.(*social.SendFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(social.ListRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ListRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListRequests(ctx, req.(*social.ListRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_AcceptFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(social.AcceptFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).AcceptFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_AcceptFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).AcceptFriendRequest(ctx, req.(*social.AcceptFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeclineFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(social.DeclineFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeclineFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeclineFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeclineFriendRequest(ctx, req.(*social.DeclineFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(social.RemoveFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RemoveFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_RemoveFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RemoveFriend(ctx, req.(*social.RemoveFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(social.ListFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ListFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListFriends(ctx, req.(*social.ListFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateDirectChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chat.CreateDirectChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateDirectChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreateDirectChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateDirectChat(ctx, req.(*chat.CreateDirectChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chat.GetChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetChat(ctx, req.(*chat.GetChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListUserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chat.ListUserChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListUserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ListUserChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListUserChats(ctx, req.(*chat.ListUserChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListChatMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chat.ListChatMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListChatMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ListChatMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListChatMembers(ctx, req.(*chat.ListChatMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chat.SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SendMessage(ctx, req.(*chat.SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chat.ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListMessages(ctx, req.(*chat.ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.krus210.balun_microservices.protobuf.gateway.v1.proto.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _GatewayService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GatewayService_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _GatewayService_Refresh_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _GatewayService_CreateProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _GatewayService_UpdateProfile_Handler,
		},
		{
			MethodName: "GetProfileByID",
			Handler:    _GatewayService_GetProfileByID_Handler,
		},
		{
			MethodName: "GetProfileByNickname",
			Handler:    _GatewayService_GetProfileByNickname_Handler,
		},
		{
			MethodName: "SearchByNickname",
			Handler:    _GatewayService_SearchByNickname_Handler,
		},
		{
			MethodName: "SendFriendRequest",
			Handler:    _GatewayService_SendFriendRequest_Handler,
		},
		{
			MethodName: "ListRequests",
			Handler:    _GatewayService_ListRequests_Handler,
		},
		{
			MethodName: "AcceptFriendRequest",
			Handler:    _GatewayService_AcceptFriendRequest_Handler,
		},
		{
			MethodName: "DeclineFriendRequest",
			Handler:    _GatewayService_DeclineFriendRequest_Handler,
		},
		{
			MethodName: "RemoveFriend",
			Handler:    _GatewayService_RemoveFriend_Handler,
		},
		{
			MethodName: "ListFriends",
			Handler:    _GatewayService_ListFriends_Handler,
		},
		{
			MethodName: "CreateDirectChat",
			Handler:    _GatewayService_CreateDirectChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _GatewayService_GetChat_Handler,
		},
		{
			MethodName: "ListUserChats",
			Handler:    _GatewayService_ListUserChats_Handler,
		},
		{
			MethodName: "ListChatMembers",
			Handler:    _GatewayService_ListChatMembers_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _GatewayService_SendMessage_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _GatewayService_ListMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gateway/service.proto",
}
